meta {
  name: Security Analysis - Rate Limiting
  type: http
  seq: 6
}

post {
  url: {{aiServiceUrl}}/ai/analyze/security
  body: json
  auth: none
}

body:json {
  {
    "spec_text": "openapi: 3.0.0\ninfo:\n  title: High Traffic API\n  version: 1.0.0\npaths:\n  /api/v1/login:\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                password:\n                  type: string\n      responses:\n        200:\n          description: Login successful\n        401:\n          description: Invalid credentials\n  /api/v1/password-reset:\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n      responses:\n        200:\n          description: Reset email sent\n  /api/v1/data/export:\n    get:\n      responses:\n        200:\n          description: Large data export\n  /api/v1/upload:\n    post:\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n      responses:\n        201:\n          description: File uploaded",
    "prompt": "Analyze this API for rate limiting and DDoS protection requirements",
    "operation_type": "validate",
    "streaming": "disabled",
    "session_id": "{{sampleSessionId}}",
    "user_id": "{{sampleUserId}}",
    "tags": ["security", "rate_limiting", "ddos"]
  }
}

tests {
  test("Status should be 200", function() {
    expect(res.getStatus()).to.equal(200);
  });

  test("Should identify rate limiting needs", function() {
    const analysis = res.getBody().updated_spec_text;
    expect(analysis.toLowerCase()).to.include.oneOf(['rate limit', 'throttle', 'quota']);
  });

  test("Should mention DDoS protection", function() {
    const analysis = res.getBody().updated_spec_text;
    expect(analysis.toLowerCase()).to.include.oneOf(['ddos', 'denial of service', 'flood']);
  });

  test("Should identify brute force vulnerabilities", function() {
    const analysis = res.getBody().updated_spec_text;
    expect(analysis.toLowerCase()).to.include.oneOf(['brute force', 'login attempt', 'credential']);
  });

  test("Should mention resource exhaustion", function() {
    const analysis = res.getBody().updated_spec_text;
    expect(analysis.toLowerCase()).to.include.oneOf(['resource', 'exhaustion', 'abuse']);
  });

  test("Should suggest protection mechanisms", function() {
    const analysis = res.getBody().updated_spec_text;
    expect(analysis.toLowerCase()).to.include.oneOf(['captcha', 'timeout', 'backoff']);
  });
}