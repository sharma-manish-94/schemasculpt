meta {
  name: Create Session
  type: http
  seq: 4
}

post {
  url: {{baseUrl}}/ai/context/session?user_id={{userId}}
  body: none
  auth: none
}

headers {
  Content-Type: application/json
  X-Correlation-ID: {{correlationId}}
}

docs {
  # Create Conversation Session

  Creates a new conversation session for context management.

  **Test Scenario:**
  - Create new session for user via query parameter
  - Test session initialization
  - Validate session metadata

  **Expected Response:**
  - New session ID
  - User ID association (should match the provided user_id)
  - Creation timestamp

  **Note:**
  - user_id is passed as a query parameter
  - If the test fails, try changing to form body or JSON body approach
}

tests {
  test("Status should be 200", function() {
    expect(res.getStatus()).to.equal(200);
  });

  test("Should return session ID", function() {
    expect(res.getBody().session_id).to.be.a('string');

    // Store session ID for other tests
    bru.setVar("sessionId", res.getBody().session_id);
  });

  test("Should include user ID", function() {
    expect(res.getBody().user_id).to.equal("test-user");
  });

  test("Should include creation timestamp", function() {
    expect(res.getBody().created_at).to.be.a('string');
  });
}